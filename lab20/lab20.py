import random
from typing import List, Tuple

def fast_exp_mod(a, n, s):
    """–ë—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å –ø–æ –º–æ–¥—É–ª—é (–º–µ—Ç–æ–¥ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤)"""
    x = 1
    while n > 0:
        if n & 1:  # –ï—Å–ª–∏ –º–ª–∞–¥—à–∏–π –±–∏—Ç —Ä–∞–≤–µ–Ω 1
            x = (x * a) % s
        a = (a * a) % s
        n = n >> 1  # –°–¥–≤–∏–≥ –≤–ø—Ä–∞–≤–æ (–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 2)
    return x

def generate_prime(k):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–∏—Å–ª–∞ –¥–ª–∏–Ω–æ–π k –±–∏—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ –ú–∏–ª–ª–µ—Ä–∞-–†–∞–±–∏–Ω–∞"""
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ k-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        p = random.getrandbits(k)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—à–∏–π –∏ –º–ª–∞–¥—à–∏–π –±–∏—Ç—ã –≤ 1 –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–ª–∏–Ω—ã –∏ –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç–∏
        highest_bit = 1 << (k - 1)
        lowest_bit = 1
        p = (p | highest_bit) | lowest_bit
        p = int(p)
        t = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ú–∏–ª–ª–µ—Ä–∞-–†–∞–±–∏–Ω–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if p < 2:
            continue
        if p in (2, 3):
            return p
        if p % 2 == 0:
            continue
            
        # –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ p-1 = r * 2^s
        s = 0
        r = p - 1
        while r % 2 == 0:
            r //= 2
            s += 1
            
        # –¢–µ—Å—Ç –ú–∏–ª–ª–µ—Ä–∞-–†–∞–±–∏–Ω–∞
        for _ in range(t):
            a = random.randint(2, p - 2)
            y = fast_exp_mod(a, r, p)
            if y == 1 or y == p - 1:
                continue
            for _ in range(s - 1):
                y = fast_exp_mod(y, 2, p)
                if y == p - 1:
                    break
            else:
                break
        else:
            return p  # –ß–∏—Å–ª–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ç–µ—Å—Ç—ã - –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
__PRIME__ = generate_prime(512)

def generate_polynomial(t: int, secret: int) -> List[int]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–∏–Ω–æ–º–∞ —Å—Ç–µ–ø–µ–Ω–∏ t-1 —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º —á–ª–µ–Ω–æ–º secret"""
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: secret (—Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω) + t-1 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    return [secret] + [random.randrange(0, __PRIME__) for _ in range(t - 1)]

def evaluate_polynomial(coeffs: List[int], x: int) -> int:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∏–Ω–æ–º–∞ –≤ —Ç–æ—á–∫–µ x (—Å—Ö–µ–º–∞ –ì–æ—Ä–Ω–µ—Ä–∞)"""
    y = 0
    for i, a in enumerate(coeffs):
        # y = a0 + a1*x + a2*x^2 + ... + an*x^n mod __PRIME__
        y = (y + a * fast_exp_mod(x, i, __PRIME__)) % __PRIME__
    return y

def generate_shares(n: int, t: int, secret: int) -> List[Tuple[int, int]]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è n –¥–æ–ª–µ–π —Å–µ–∫—Ä–µ—Ç–∞ —Å –ø–æ—Ä–æ–≥–æ–º t"""
    assert 1 < t <= n, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 < t <= n"
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–∏–Ω–æ–º —Å—Ç–µ–ø–µ–Ω–∏ t-1
    coeffs = generate_polynomial(t - 1, secret)
    shares = []
    used_x = set()  # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    
    for _ in range(n):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
        while True:
            x = random.randint(1, __PRIME__ - 1)
            if x not in used_x:
                used_x.add(x)
                break
        # –í—ã—á–∏—Å–ª—è–µ–º y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–∏–Ω–æ–º–∞ –≤ —Ç–æ—á–∫–µ x)
        y = evaluate_polynomial(coeffs, x)
        shares.append((x, y))
    return shares

def lagrange_interpolation(x: int, x_s: List[int], y_s: List[int]) -> int:
    """–ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –õ–∞–≥—Ä–∞–Ω–∂–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–æ—á–∫–µ x"""
    total = 0
    k = len(x_s)
    
    for i in range(k):
        xi, yi = x_s[i], y_s[i]
        li = 1  # –ë–∞–∑–∏—Å–Ω—ã–π –ø–æ–ª–∏–Ω–æ–º –õ–∞–≥—Ä–∞–Ω–∂–∞
        
        for j in range(k):
            if i != j:
                xj = x_s[j]
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—è –∏ –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è
                numerator = (x - xj) % __PRIME__
                denominator = (xi - xj) % __PRIME__
                # –û–±—Ä–∞—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–Ω–∞–º–µ–Ω–∞—Ç–µ–ª—è (–ø–æ –º–∞–ª–æ–π —Ç–µ–æ—Ä–µ–º–µ –§–µ—Ä–º–∞)
                inv_denominator = fast_exp_mod(denominator, __PRIME__ - 2, __PRIME__)
                li = (li * numerator * inv_denominator) % __PRIME__
                
        total = (total + yi * li) % __PRIME__
    return total

def reconstruct_secret(shares: List[Tuple[int, int]]) -> int:
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –ø–æ t –¥–æ–ª—è–º"""
    # –†–∞–∑–¥–µ–ª—è–µ–º x –∏ y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    x_s, y_s = zip(*shares)
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤ —Ç–æ—á–∫–µ 0 (—Å–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω –ø–æ–ª–∏–Ω–æ–º–∞)
    return lagrange_interpolation(0, list(x_s), list(y_s))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        N = int(input("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (N): "))
        T = int(input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (T): "))
        assert 1 < T <= N, "–û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è 1 < T <= N"
    except (ValueError, AssertionError) as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {e}")
        return

    try:
        Users = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (Users): "))
        if Users > N or Users < 1:
            raise ValueError("Users –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ N")
    except ValueError as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: {e}")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞
    secret = random.randint(1, __PRIME__ - 1)
    print(f"\nüîê –°–µ–∫—Ä–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {secret}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ª–µ–π —Å–µ–∫—Ä–µ—Ç–∞
    shares = generate_shares(N, T, secret)
    print(f"\nüì® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–ª–∏ (r_i, s_i):")
    for idx, (r, s) in enumerate(shares, start=1):
        print(f"–£—á–∞—Å—Ç–Ω–∏–∫ {idx}: ({r}, {s})")

    if Users < T:
        print(f"\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞.")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º T = {T}, –∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ Users = {Users}.")
    else:
        print(f"\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –ø–µ—Ä–≤—ã—Ö {T} –∏–∑ {Users} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
        available_shares = shares[:Users]
        selected_shares = random.sample(available_shares, T)
        recovered_secret = reconstruct_secret(selected_shares)
        print(f"\nüîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç: {recovered_secret}")
        print("‚úîÔ∏è –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:", recovered_secret == secret)

if __name__ == "__main__":
    main()